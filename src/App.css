import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import './App.css';

// Import components
import DashboardPage from './pages/DashboardPage';
import ErrorBoundary from './components/ErrorBoundary';
import LoadingSpinner from './components/LoadingSpinner';
import NotificationSystem from './components/NotificationSystem';

// Import API client
import { APIClient } from './lib/api';

function App() {
  const [isLoading, setIsLoading] = useState(true);
  const [notifications, setNotifications] = useState([]);
  const [apiClient] = useState(() => new APIClient());

  // Initialize app without authentication
  useEffect(() => {
    const initializeApp = async () => {
      try {
        // Set loading to false after a brief moment
        setTimeout(() => {
          setIsLoading(false);
        }, 1000);
      } catch (error) {
        console.error('App initialization error:', error);
        setIsLoading(false);
      }
    };

    initializeApp();
  }, []);

  // Notification system
  const addNotification = (notification) => {
    const id = Date.now().toString();
    const newNotification = { ...notification, id };
    setNotifications(prev => [...prev, newNotification]);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      removeNotification(id);
    }, 5000);
  };

  const removeNotification = (id) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <LoadingSpinner size="large" />
          <p className="mt-4 text-gray-600">Loading RecruitAI...</p>
        </div>
      </div>
    );
  }

  return (
    <ErrorBoundary>
      <Router>
        <div className="App min-h-screen bg-gray-50">
          <Routes>
            {/* Default route - go directly to dashboard */}
            <Route 
              path="/" 
              element={
                <DashboardPage 
                  apiClient={apiClient}
                  addNotification={addNotification}
                />
              } 
            />
            
            {/* Dashboard route */}
            <Route 
              path="/dashboard" 
              element={
                <DashboardPage 
                  apiClient={apiClient}
                  addNotification={addNotification}
                />
              } 
            />
            
            {/* Redirect any other routes to dashboard */}
            <Route path="*" element={<Navigate to="/" replace />} />
          </Routes>

          {/* Notification System */}
          <NotificationSystem 
            notifications={notifications}
            removeNotification={removeNotification}
          />
        </div>
      </Router>
    </ErrorBoundary>
  );
}

export default App;
